version: 2.1

orbs:
  slack: circleci/slack@4.3.0

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when_to_run:
        type: string
        default: "on_fail"
    # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "InitialStack-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name  "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            exit 1

  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          event:  pass
          template: basic_success_1
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_slack_error
      - notify_slack_pass

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_slack_error
      - notify_slack_pass

  test-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - restore_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_slack_error
      - notify_slack_pass

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - restore_cache:
          paths:  [backend/node_modules]
          key: backend-build
      - notify_slack_error
      - notify_slack_pass

  scan-frontend:
    docker:
      - image:  circleci/node:13.8.0
    # Docker image here
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
    # Your job code here
      - run:
          name: Scan frontend test
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical --force
            npm audit --audit-level=critical
      - restore_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_slack_error
      - notify_slack_pass

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:  [backend-Build]
      - run:
          name: Scan backend test
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit fix --force
            npm audit --audit-level=critical
      - restore_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_slack_error
      - notify_slack_pass

  deploy-infrastructure:
    docker:
      - image:  amazon/aws-cli
    # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file Give-Your-Application-Auto-Deploy-Superpowers/.circleci/files/backend.yml \
              #--tags project=your-udapeople \
              # --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .Give-Your-Application-Auto-Deploy-Superpowers/.circleci/files/frontend.yml \
              #--tags project=udapeople \
              # --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              # --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            sudo apt-get install tar
            sudo apt-get install gzip
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure